// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// User management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // For email/password auth
  isVerified    Boolean   @default(false)
  role          Role      @default(CUSTOMER)
  emailVerified DateTime? // For NextAuth
  image         String?   // For OAuth providers
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Relations
  addresses       Address[]
  orders          Order[]
  notifications   Notification[]
  reviews         Review[]
  passwordResets  PasswordReset[]
  emailVerifications EmailVerification[]
  priorityOrders  PriorityOrder[]
  cart            Cart?


  // New relations for price management
  priceHistory ProductPriceHistory[] @relation("PriceHistoryAdmin")
  priceAlerts PriceAlert[]

  @@map("users")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(HOME)
  name         String
  phone        String // Moved from User model
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pincode      String
  landmark     String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  priorityOrders PriorityOrder[]

  @@map("addresses")
}

// Product management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id           String   @id @default(cuid())
  categoryId   String
  name         String
  slug         String   @unique
  description  String?
  imageUrl     String?
  unit         String // kg, liter, piece, etc.
  unitSize     Float // 1, 0.5, 2.5, etc.
  mrp          Float // Maximum Retail Price
  sellingPrice Float // Your selling price (discounted)
  isActive     Boolean  @default(true)
  minOrderQty  Int      @default(1)
  maxOrderQty  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  category    Category     @relation(fields: [categoryId], references: [id])
  groupOrders GroupOrder[]
  orderItems  OrderItem[]
  priorityOrders PriorityOrder[]
  reviews     Review[]
  cartItems   CartItem[]

  // New relations for price management
  priceHistory ProductPriceHistory[]
  priceChangeNotifications PriceChangeNotification[]
  priceAlerts PriceAlert[]

  @@map("products")
}

// Group ordering system
model GroupOrder {
  id                String           @id @default(cuid())
  productId         String
  batchNumber       String           @unique // GO-2024-001, GO-2024-002, etc.
  minThreshold      Float // Minimum amount to trigger order
  currentAmount     Float            @default(0)
  targetQuantity    Int // Total quantity needed
  currentQuantity   Int              @default(0)
  pricePerUnit      Float // Bulk price per unit
  status            GroupOrderStatus @default(COLLECTING)
  expiresAt         DateTime // When to stop collecting orders
  estimatedDelivery DateTime? // Expected delivery date
  actualDelivery    DateTime? // Actual delivery date
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  product    Product    @relation(fields: [productId], references: [id])
  orders     Order[]
  deliveries Delivery[]

  @@map("group_orders")
}

// Individual orders
model Order {
  id            String        @id @default(cuid())
  userId        String
  groupOrderId  String?       // Made optional to support both types
  addressId     String
  orderNumber   String        @unique // ORD-2024-001, etc.
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod? // Updated to use enum
  paymentId     String? // Payment gateway transaction ID
  notes         String?
  placedAt      DateTime      @default(now())
  confirmedAt   DateTime?
  cancelledAt   DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  groupOrder GroupOrder? @relation(fields: [groupOrderId], references: [id]) // Made optional
  address    Address     @relation(fields: [addressId], references: [id])
  items      OrderItem[]
  payments   Payment[]
  delivery   Delivery?

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float // Price per unit at time of order
  totalPrice Float // quantity * unitPrice
  createdAt  DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment management
model Payment {
  id               String        @id @default(cuid())
  orderId          String
  amount           Float
  currency         String        @default("BDT")
  paymentMethod    PaymentMethod // Updated to use enum
  gatewayProvider  String? // Can be null for cash on delivery
  gatewayOrderId   String? // Gateway's order ID
  gatewayPaymentId String? // Gateway's payment ID
  status           PaymentStatus @default(PENDING)
  failureReason    String?
  processedAt      DateTime?
  refundedAt       DateTime?
  refundAmount     Float?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// Delivery management
model PickupLocation {
  id           String   @id @default(cuid())
  name         String
  address      String
  city         String
  pincode      String
  contactName  String
  contactPhone String
  landmark     String?
  instructions String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  deliveries Delivery[]
  priorityDeliveries PriorityDelivery[]

  @@map("pickup_locations")
}

model Delivery {
  id               String         @id @default(cuid())
  orderId          String         @unique
  groupOrderId     String
  pickupLocationId String?
  deliveryType     DeliveryType   @default(PICKUP)
  status           DeliveryStatus @default(PENDING)
  trackingNumber   String?
  estimatedDate    DateTime?
  actualDate       DateTime?
  deliveryNotes    String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  order          Order           @relation(fields: [orderId], references: [id])
  groupOrder     GroupOrder      @relation(fields: [groupOrderId], references: [id])
  pickupLocation PickupLocation? @relation(fields: [pickupLocationId], references: [id])

  @@map("deliveries")
}

// Supplier management
model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactPerson String
  email         String
  phone         String
  address       String
  city          String
  state         String
  pincode       String
  gstNumber     String?
  bankDetails   Json? // Store bank account details as JSON
  isActive      Boolean  @default(true)
  rating        Float?   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model PurchaseOrder {
  id            String              @id @default(cuid())
  supplierId    String
  groupOrderIds String[] // Array of group order IDs
  poNumber      String              @unique // PO-2024-001
  totalAmount   Float
  status        PurchaseOrderStatus @default(DRAFT)
  orderDate     DateTime            @default(now())
  expectedDate  DateTime?
  receivedDate  DateTime?
  notes         String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  supplier Supplier            @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id               String   @id @default(cuid())
  purchaseOrderId  String
  productName      String
  quantity         Float
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Float?   @default(0)
  createdAt        DateTime @default(now())

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

// Reviews and feedback
model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int // 1-5 stars
  comment    String?
  isVerified Boolean  @default(false) // If user actually purchased
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json? // Additional data as JSON
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Password reset tokens
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

// Email verification tokens
model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

// Settings and configuration
model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

// Discount configuration for group orders
model DiscountConfig {
  id          String   @id @default(cuid())
  name        String   // e.g., "Bulk Purchase Discount", "Seasonal Discount"
  description String?
  discountType DiscountType
  discountValue Float  // Percentage (0-100) or fixed amount
  isActive    Boolean  @default(true)
  minQuantity Int?     // Minimum quantity to apply discount
  maxQuantity Int?     // Maximum quantity for discount
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("discount_configs")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}

enum GroupOrderStatus {
  COLLECTING // Accepting orders
  THRESHOLD_MET // Minimum reached, processing
  ORDERED // Order placed with supplier
  SHIPPED // In transit
  DELIVERED // Completed
  CANCELLED // Cancelled due to insufficient orders
  EXPIRED // Time limit exceeded
}

enum OrderStatus {
  PENDING // Order placed, payment pending
  CONFIRMED // Payment confirmed
  PROCESSING // Being prepared
  SHIPPED // On the way
  DELIVERED // Completed
  CANCELLED // Cancelled by user/admin
  REFUNDED // Money returned
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CASH_ON_DELIVERY // New status for COD orders
}

enum PaymentMethod {
  CARD
  UPI
  NETBANKING
  WALLET
  CASH_ON_DELIVERY
}

enum DeliveryType {
  PICKUP // Customer pickup
  HOME_DELIVERY // Delivered to address
}

enum DeliveryStatus {
  PENDING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum PurchaseOrderStatus {
  DRAFT
  SENT
  CONFIRMED
  PARTIALLY_RECEIVED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  ORDER_CONFIRMATION
  THRESHOLD_MET
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  GENERAL
  PRIORITY_ORDER_CONFIRMED
  PRIORITY_ORDER_SHIPPED
  PRIORITY_ORDER_DELIVERED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Price Management Enums
enum PriceChangeType {
  INCREASE
  DECREASE
  NO_CHANGE
}



enum PriceAlertType {
  PRICE_DROP
  PRICE_INCREASE
  ANY_CHANGE
}

// Price History Tracking
model ProductPriceHistory {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  mrp       Decimal  @db.Decimal(10, 2)
  sellingPrice Decimal @db.Decimal(10, 2)
  changeReason String? // "Supplier cost increase", "Market adjustment", etc.
  adminId   String?  // Who made the change
  admin     User?    @relation("PriceHistoryAdmin", fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([productId, createdAt])
  @@index([createdAt])
  @@map("product_price_history")
}

// Price Change Notifications
model PriceChangeNotification {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  oldPrice    Decimal  @db.Decimal(10, 2)
  newPrice    Decimal  @db.Decimal(10, 2)
  changePercentage Decimal @db.Decimal(5, 2)
  changeType  PriceChangeType
  reason      String?
  isNotified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([productId, createdAt])
  @@map("price_change_notifications")
}



// Price Alert Subscriptions
model PriceAlert {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  targetPrice Decimal  @db.Decimal(10, 2)
  alertType   PriceAlertType
  isActive    Boolean  @default(true)
  lastTriggered DateTime?
  createdAt   DateTime @default(now())
  
  @@unique([userId, productId])
  @@index([productId, targetPrice])
  @@map("price_alerts")
}

// Priority-based delivery system (MRP price)
model PriorityOrder {
  id                String           @id @default(cuid())
  productId         String
  userId            String
  addressId         String
  orderNumber       String           @unique // PO-2024-001, PO-2024-002, etc.
  quantity          Int
  unitPrice         Float // MRP price per unit
  totalAmount       Float
  deliveryType      DeliveryType     @default(HOME_DELIVERY)
  status            PriorityOrderStatus @default(PENDING)
  paymentStatus     PaymentStatus    @default(PENDING)
  paymentMethod     PaymentMethod?
  paymentId         String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  notes             String?
  placedAt          DateTime         @default(now())
  confirmedAt       DateTime?
  cancelledAt       DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  product    Product    @relation(fields: [productId], references: [id])
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address     @relation(fields: [addressId], references: [id], onDelete: Cascade)
  items      PriorityOrderItem[]
  delivery   PriorityDelivery?

  @@map("priority_orders")
}

model PriorityOrderItem {
  id         String   @id @default(cuid())
  priorityOrderId String
  productId  String
  quantity   Int
  unitPrice  Float // MRP price per unit at time of order
  totalPrice Float // quantity * unitPrice
  createdAt  DateTime @default(now())

  // Relations
  priorityOrder PriorityOrder @relation(fields: [priorityOrderId], references: [id], onDelete: Cascade)

  @@map("priority_order_items")
}

model PriorityDelivery {
  id               String         @id @default(cuid())
  priorityOrderId  String         @unique
  pickupLocationId String?
  deliveryType     DeliveryType   @default(HOME_DELIVERY)
  status           DeliveryStatus @default(PENDING)
  trackingNumber   String?
  estimatedDate    DateTime?
  actualDate       DateTime?
  deliveryNotes    String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  priorityOrder  PriorityOrder   @relation(fields: [priorityOrderId], references: [id])
  pickupLocation PickupLocation? @relation(fields: [pickupLocationId], references: [id])

  @@map("priority_deliveries")
}

// Simplified priority order status
enum PriorityOrderStatus {
  PENDING      // Order placed, payment pending
  CONFIRMED    // Payment confirmed
  PROCESSING   // Being prepared
  READY        // Ready for pickup/delivery
  SHIPPED      // On the way
  DELIVERED    // Completed
  CANCELLED    // Cancelled by user/admin
  REFUNDED     // Money returned
}

// Shopping Cart System
model Cart {
  id            String   @id @default(cuid())
  userId        String?  // null for guest carts
  totalItems    Int      @default(0)
  subtotal      Float    @default(0)
  totalDiscount Float    @default(0)
  totalAmount   Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@unique([userId])
  @@map("carts")
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String
  productId  String
  quantity   Int
  unitPrice  Float
  orderType  String   // 'priority' or 'group'
  groupOrderId String? // for group orders
  createdAt  DateTime @default(now())

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}
